generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int               @id @default(autoincrement())
  name        String
  slug        String            @unique
  description String?           @db.Text
  image       String?
  listings    CategoryListing[]
}

model CategoryListing {
  id         Int      @id @default(autoincrement())
  listingId  Int
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  listing    Listing  @relation(fields: [listingId], references: [id])

  @@unique([listingId, categoryId])
  @@index([categoryId], map: "CategoryListing_categoryId_fkey")
}

model Location {
  id        Int       @id @default(autoincrement())
  latitude  Float
  longitude Float
  address   String?
  listings  Listing[]
}

model Author {
  id       Int       @id @default(autoincrement())
  name     String
  email    String    @unique
  password String
  listings Listing[]
}

model Listing {
  id               Int               @id @default(autoincrement())
  slug             String            @unique
  name             String
  phone            String?
  views            Int               @default(0)
  state            String
  image            String
  gallery          Json
  description      String?           @db.Text
  rating           Float?
  website          String?
  operatingHours   String?           @db.Text
  tags             Json
  locationId       Int
  authorId         Int
  type_of_service  Json
  review_generated String?           @db.Text
  similar_places   Json
  status           String            @default("draft")
  data_id          String?           @db.VarChar(255)
  google_reviews   Json?
  categoryListing  CategoryListing[]
  author           Author            @relation(fields: [authorId], references: [id])
  location         Location          @relation(fields: [locationId], references: [id])
  reviews          Review[]
  serviceRequests  ServiceRequest[]

  @@index([authorId], map: "Listing_authorId_fkey")
  @@index([locationId], map: "Listing_locationId_fkey")
}

model ServiceRequest {
  id                 Int       @id @default(autoincrement())
  fullName           String
  email              String
  zipCode            String
  phone              String?
  careNeeded         String?
  relationToResident String?
  moveInDate         DateTime?
  budget             String?
  listingId          Int
  createdAt          DateTime  @default(now())
  listing            Listing   @relation(fields: [listingId], references: [id])

  @@index([listingId], map: "ServiceRequest_listingId_fkey")
}

model Newsletter {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
}

model Review {
  id        Int     @id @default(autoincrement())
  text      String
  rating    Float
  listingId Int
  listing   Listing @relation(fields: [listingId], references: [id])

  @@index([listingId], map: "Review_listingId_fkey")
}

model Listing_old {
  id               Int     @id @default(autoincrement())
  slug             String  @unique(map: "Listing_slug_key")
  name             String
  phone            String?
  views            Int     @default(0)
  state            String
  image            String
  gallery          Json
  description      String? @db.Text
  rating           Float?
  website          String?
  operatingHours   String? @db.Text
  tags             Json
  locationId       Int
  authorId         Int
  type_of_service  Json
  review_generated String? @db.Text
  similar_places   Json
  status           String  @default("draft")

  @@index([authorId], map: "Listing_authorId_fkey")
  @@index([locationId], map: "Listing_locationId_fkey")
}
