// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Category {
  id          Int                @id @default(autoincrement())
  name        String
  slug        String             @unique
  description String?            @db.Text
  image       String?
  listings    CategoryListing[]
}

model CategoryListing {
  id          Int       @id @default(autoincrement())
  listingId   Int
  categoryId  Int
  listing     Listing   @relation(fields: [listingId], references: [id])
  category    Category  @relation(fields: [categoryId], references: [id])
  @@unique([listingId, categoryId])
}



model Location {
  id Int @id @default(autoincrement())
  latitude Float
  longitude Float
  address String?
  listings Listing[]
}

model Author {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  listings Listing[]

}


// model Listing {
//   id Int @id @default(autoincrement())
//   slug          String    @unique
//   name          String
//   phone         String?
//   views         Int       @default(0)
//   state         String
//   image         String
//   gallery       Json
//   description   String?   @db.Text
//   rating        Float?
//   website       String?
//   operatingHours String?
//   tags          Json
//   category Category @relation(fields: [categoryId], references: [id])
//   categoryId Int
//   location Location @relation(fields: [locationId], references: [id])
//   locationId Int
//   author        Author    @relation(fields: [authorId], references: [id])
//   authorId      Int
//   serviceRequests ServiceRequest[]
//   servicesOffered       Json
//   reviews Review[]
// }

model Listing {
  id              Int                @id @default(autoincrement())
  slug            String             @unique
  name            String
  phone           String?
  views           Int                @default(0)
  state           String
  image           String
  gallery         Json
  description     String?            @db.Text
  rating          Float?
  website         String?
  operatingHours  String?            @db.Text
  tags            Json
  locationId      Int
  authorId        Int
  type_of_service Json
  review_generated String?           @db.Text
  similar_places  Json
  status          String             @default("draft")
  categoryListing CategoryListing[]
  location        Location           @relation(fields: [locationId], references: [id])
  author          Author             @relation(fields: [authorId], references: [id])
  serviceRequests ServiceRequest[]
  reviews         Review[]
}




model ServiceRequest {
  id             Int      @id @default(autoincrement())
  fullName       String
  email          String
  zipCode        String
  phone          String?
  careNeeded     String?
  relationToResident String?
  moveInDate     DateTime?
  budget         String?
  listingId      Int
  listing        Listing  @relation(fields: [listingId], references: [id])
  createdAt      DateTime @default(now())
}

model Newsletter {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
}


model Review {
  id Int @id @default(autoincrement())
  text String
  rating Float
  listingId Int
  listing Listing @relation(fields: [listingId], references: [id])
}